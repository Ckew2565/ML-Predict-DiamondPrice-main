import streamlit as st
import joblib
import pandas as pd

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü‡πÑ‡∏ß‡πâ
best_model = joblib.load('best_ann_model.pkl')
columns = joblib.load('df_columns.pkl')

# ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ
st.title("üéà Diamond Price Prediction App")
st.write("Let's predict the price of diamonds!")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á input fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏ä‡∏£
carat = st.number_input("Carat Weight", min_value=0.01, step=0.01)
cut = st.selectbox("Cut", options=["Fair", "Good", "Very Good", "Premium", "Ideal"])
color = st.selectbox("Color", options=["D", "E", "F", "G", "H", "I", "J"])
clarity = st.selectbox("Clarity", options=["IF", "VVS1", "VVS2", "VS1", "VS2", "SI1", "SI2", "I1"])
depth = st.number_input("Depth Percentage", min_value=40.0, max_value=80.0, step=0.1)
table = st.number_input("Table Percentage", min_value=40.0, max_value=100.0, step=0.1)
x = st.number_input("Length (mm)", min_value=0.2, step=0.1)
y = st.number_input("Width (mm)", min_value=0.2, step=0.1)
z = st.number_input("Height (mm)", min_value=0.2, step=0.1)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏¥‡∏Å‡∏ä‡∏±‡∏ô‡∏ô‡∏≤‡∏£‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô
input_data = {
    "carat": carat,
    "cut": cut,
    "color": color,
    "clarity": clarity,
    "depth": depth,
    "table": table,
    "x": x,
    "y": y,
    "z": z,
}

# ‡πÅ‡∏õ‡∏•‡∏á input ‡πÄ‡∏õ‡πá‡∏ô DataFrame
input_df = pd.DataFrame([input_data])

# ‡∏ó‡∏≥ One-Hot Encoding ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input
input_df_encoded = pd.get_dummies(input_df)

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
for col in columns:
    if col not in input_df_encoded.columns:
        input_df_encoded[col] = 0

# ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
input_df_encoded = input_df_encoded[columns]

# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Predict' ‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏ä‡∏£
if st.button("Predict"):
    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏ä‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
    prediction = best_model.predict(input_df_encoded)

    # ‡∏Ñ‡∏π‡∏ì‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢ 100,000
    predicted_price = prediction[0] * 100000 * -1

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    st.write(f"The predicted price of the diamond is: ${predicted_price:,.2f}")
